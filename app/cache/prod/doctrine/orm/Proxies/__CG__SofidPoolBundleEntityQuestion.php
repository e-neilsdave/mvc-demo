<?php

namespace Proxies\__CG__\Sofid\PoolBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Question extends \Sofid\PoolBundle\Entity\Question implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'title', 'completionPoint', 'commentPoint', 'delay', 'dividedValue', 'delayedCustomerMessage', 'delayedThanksMessage', 'isActive', 'commercant', 'options', 'feedback');
        }

        return array('__isInitialized__', 'id', 'title', 'completionPoint', 'commentPoint', 'delay', 'dividedValue', 'delayedCustomerMessage', 'delayedThanksMessage', 'isActive', 'commercant', 'options', 'feedback');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Question $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompletionPoint($completionPoint)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompletionPoint', array($completionPoint));

        return parent::setCompletionPoint($completionPoint);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompletionPoint()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompletionPoint', array());

        return parent::getCompletionPoint();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentPoint($commentPoint)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentPoint', array($commentPoint));

        return parent::setCommentPoint($commentPoint);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentPoint()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentPoint', array());

        return parent::getCommentPoint();
    }

    /**
     * {@inheritDoc}
     */
    public function setDividedValue($dividedValue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDividedValue', array($dividedValue));

        return parent::setDividedValue($dividedValue);
    }

    /**
     * {@inheritDoc}
     */
    public function getDividedValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDividedValue', array());

        return parent::getDividedValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setDelayedCustomerMessage($delayedCustomerMessage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDelayedCustomerMessage', array($delayedCustomerMessage));

        return parent::setDelayedCustomerMessage($delayedCustomerMessage);
    }

    /**
     * {@inheritDoc}
     */
    public function getDelayedCustomerMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDelayedCustomerMessage', array());

        return parent::getDelayedCustomerMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setDelayedThanksMessage($delayedThanksMessage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDelayedThanksMessage', array($delayedThanksMessage));

        return parent::setDelayedThanksMessage($delayedThanksMessage);
    }

    /**
     * {@inheritDoc}
     */
    public function getDelayedThanksMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDelayedThanksMessage', array());

        return parent::getDelayedThanksMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setDelay($delay)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDelay', array($delay));

        return parent::setDelay($delay);
    }

    /**
     * {@inheritDoc}
     */
    public function getDelay()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDelay', array());

        return parent::getDelay();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommercant($commercant)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommercant', array($commercant));

        return parent::setCommercant($commercant);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommercant()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommercant', array());

        return parent::getCommercant();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', array($isActive));

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsActive', array());

        return parent::getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    public function addOption(\Sofid\PoolBundle\Entity\Option $options)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addOption', array($options));

        return parent::addOption($options);
    }

    /**
     * {@inheritDoc}
     */
    public function removeOption(\Sofid\PoolBundle\Entity\Option $options)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeOption', array($options));

        return parent::removeOption($options);
    }

    /**
     * {@inheritDoc}
     */
    public function getOption()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOption', array());

        return parent::getOption();
    }

    /**
     * {@inheritDoc}
     */
    public function addFeedback(\Sofid\PoolBundle\Entity\Feedback $feedback)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFeedback', array($feedback));

        return parent::addFeedback($feedback);
    }

    /**
     * {@inheritDoc}
     */
    public function removeFeedback(\Sofid\PoolBundle\Entity\Feedback $feedback)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeFeedback', array($feedback));

        return parent::removeFeedback($feedback);
    }

    /**
     * {@inheritDoc}
     */
    public function getFeedback()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFeedback', array());

        return parent::getFeedback();
    }

}
